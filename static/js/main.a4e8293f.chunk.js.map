{"version":3,"sources":["img/model-2.jpg","img/model-1.jpg","img/model-3.jpg","serviceWorker.js","components/Person.jsx","People.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","styles","Person","width","margin","boxShadow","img","display","userInfo","padding","imgPath","name","age","style","alt","src","People","props","state","people","model2","header","this","React","Component","backgroundColor","height","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,qC,yECA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,8ECYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCPAC,EAAS,CACbC,OAAQ,CACNC,MAAO,MACPC,OAAQ,SACRC,UAAW,gCAEbC,IAAK,CACHC,QAAS,QACTJ,MAAO,QAETK,SAAU,CACRD,QAAS,QACTJ,MAAO,OACPM,QAAS,cAIEP,EA1BA,SAAC,GAAD,IAAGQ,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,IAAlB,OACb,yBAAKC,MAAOZ,EAAOC,QACjB,yBAAKY,IAAG,UAAKH,EAAL,kCAAkBI,IAAKL,EAASG,MAAOZ,EAAOK,MACtD,0BAAMO,MAAOZ,EAAOO,UAClB,gCAASG,GADX,IAC2BC,K,wBCEVI,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,CACNT,QAASU,IACTT,KAAM,OACNC,IAAK,OANQ,E,sEA6BjB,OACE,6BACE,yBAAKC,MAAOZ,EAAOoB,SACnB,kBAAC,EAAD,CACEX,QAASY,KAAKJ,MAAMC,OAAOT,QAC3BC,KAAMW,KAAKJ,MAAMC,OAAOR,KACxBC,IAAKU,KAAKJ,MAAMC,OAAOP,W,GApCGW,IAAMC,YA2CpCvB,EAAS,CACboB,OAAQ,CACNI,gBAAiB,UACjBC,OAAQ,OACRtB,OAAQ,YC/CZuB,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SHyH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a4e8293f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/model-2.34e6604d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/model-1.f16bcd6b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/model-3.2ff903bd.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Person = ({ imgPath, name, age }) => (\n  <div style={styles.Person}>\n    <img alt={`${name}さんの画像`} src={imgPath} style={styles.img} />\n    <span style={styles.userInfo}>\n      <strong>{name}</strong>,{age}\n    </span>\n  </div>\n);\n\nconst styles = {\n  Person: {\n    width: \"85%\",\n    margin: \"0 auto\",\n    boxShadow: \"0 1px 5px rgba(0, 0, 0, 0.2)\"\n  },\n  img: {\n    display: \"block\",\n    width: \"100%\"\n  },\n  userInfo: {\n    display: \"block\",\n    width: \"100%\",\n    padding: \"1.5em 1em\"\n  }\n};\n\nexport default Person;\n","import React from \"react\";\n\nimport Person from \"./components/Person\";\n\nimport model1 from \"./img/model-1.jpg\";\nimport model2 from \"./img/model-2.jpg\";\nimport model3 from \"./img/model-3.jpg\";\n\nexport default class People extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      people: {\n        imgPath: model2,\n        name: \"Lara\",\n        age: \"22\"\n      }\n      // people: [\n      //   {\n      //     imgPath: model1,\n      //     name: \"Lara\",\n      //     age: \"22\"\n      //   },\n      //   {\n      //     imgPath: model2,\n      //     name: \"Sandra\",\n      //     age: \"18\"\n      //   },\n      //   {\n      //     imgPath: model3,\n      //     name: \"Emma\",\n      //     age: \"24\"\n      //   }\n      // ]\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={styles.header}></div>\n        <Person\n          imgPath={this.state.people.imgPath}\n          name={this.state.people.name}\n          age={this.state.people.age}\n        />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  header: {\n    backgroundColor: \"#f6f6f6\",\n    height: \"50px\",\n    margin: \"0 0 1em\"\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport People from \"./People\";\n\nReactDOM.render(<People />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}