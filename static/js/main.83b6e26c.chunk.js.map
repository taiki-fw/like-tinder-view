{"version":3,"sources":["img/model-1.jpg","img/model-2.jpg","img/model-3.jpg","serviceWorker.js","components/Person.jsx","components/ActionBtn.jsx","People.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Person","React","forwardRef","ref","imgPath","name","age","animationTimePerMillisecond","PersonStyled","alt","src","styled","div","props","ActionBtn","button","ShowUserInfoBtn","NopeBtn","onClick","e","clickFunc","icon","faTimes","size","color","LikeBtn","faHeart","JumpToUserInfo","faUserAlt","peopleData","model1","model2","model3","PeopleStyle","UserActionsStyle","People","state","people","firstPeople","createRef","handleAction","bind","isLikeAction","currentTarget","randomNum","Math","floor","random","length","randomPeople","newItem","this","slice","concat","obj","current","classList","add","setTimeout","remove","setState","isLike","item","map","index","key","Component","styles","app","height","backgroundColor","header","margin","ReactDOM","render","style","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83b6e26c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/model-1.f16bcd6b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/model-2.34e6604d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/model-3.2ff903bd.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Person = React.forwardRef(\n  ({ imgPath, name, age, animationTimePerMillisecond }, ref) => (\n    <PersonStyled\n      ref={ref}\n      animationTimePerMillisecond={animationTimePerMillisecond}\n    >\n      <img alt={`${name}さんの画像`} src={imgPath} />\n      <span>\n        <strong>{name}</strong>,{age}\n      </span>\n    </PersonStyled>\n  )\n);\n\nconst PersonStyled = styled.div`\n  @keyframes likeBtn {\n    0% {\n      transform: scale(1) rotateZ(0deg);\n      left: 0;\n    }\n    30% {\n      transform: scale(1.05) rotateZ(0deg);\n      left: 0;\n    }\n    100% {\n      transform: rotateZ(45deg);\n      left: 400px;\n    }\n  }\n\n  @keyframes nopeBtn {\n    0% {\n      transform: rotateZ(360deg);\n      right: 0;\n    }\n    30% {\n      transform: scale(1.05) rotateZ(360deg);\n      right: 0;\n    }\n    100% {\n      transform: rotateZ(315deg);\n      right: 400px;\n    }\n  }\n\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 265px;\n  margin: 0 auto;\n  box-shadow: 0 1px 5px rgba(0, 0, 0, 0.2);\n  opacity: 1;\n  transform: rotateZ(0deg);\n\n  &.like {\n    animation: likeBtn ${props => props.animationTimePerMillisecond}ms linear;\n  }\n\n  &.nope {\n    animation: nopeBtn ${props => props.animationTimePerMillisecond}ms linear;\n  }\n\n  &:first-child {\n    z-index: 5;\n  }\n\n  &:nth-child(2) {\n    z-index: 4;\n    top: 7px;\n    transform: scale(0.98);\n  }\n\n  &:nth-child(3) {\n    z-index: 3;\n    top: 14px;\n    transform: scale(0.96);\n  }\n\n  &:nth-child(n + 4) {\n    z-index: 2;\n  }\n\n  & > img,\n  & > span {\n    display: block;\n    width: 100%;\n  }\n\n  & > img {\n    height: 100%;\n  }\n\n  & > span {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    padding: 10px;\n    background-color: white;\n  }\n`;\n\nexport default Person;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart, faTimes, faUserAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ActionBtn = styled.button`\n  display: inline-block;\n  width: 48.75px;\n  height: 48.75px;\n  background-color: white;\n  outline: none;\n  border: none;\n  border-radius: 50%;\n`;\n\nconst ShowUserInfoBtn = styled(ActionBtn)`\n  margin: 0 2em;\n`;\n\nconst NopeBtn = props => (\n  <ActionBtn onClick={e => props.clickFunc(e)} name=\"nope\">\n    <FontAwesomeIcon icon={faTimes} size=\"2x\" color=\"orangered\" />\n  </ActionBtn>\n);\n\nconst LikeBtn = props => (\n  <ActionBtn onClick={e => props.clickFunc(e)} name=\"like\">\n    <FontAwesomeIcon icon={faHeart} size=\"2x\" color=\"aquamarine\" />\n  </ActionBtn>\n);\n\nconst JumpToUserInfo = () => (\n  <ShowUserInfoBtn>\n    <FontAwesomeIcon icon={faUserAlt} size=\"2x\" color=\"deepskyblue\" />\n  </ShowUserInfoBtn>\n);\n\nexport { NopeBtn, LikeBtn, JumpToUserInfo };\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Person from \"./components/Person\";\nimport { NopeBtn, LikeBtn, JumpToUserInfo } from \"./components/ActionBtn\";\n\nimport model1 from \"./img/model-1.jpg\";\nimport model2 from \"./img/model-2.jpg\";\nimport model3 from \"./img/model-3.jpg\";\n\nconst peopleData = [\n  {\n    imgPath: model1,\n    name: \"Lara\",\n    age: \"22\"\n  },\n  {\n    imgPath: model2,\n    name: \"Sandra\",\n    age: \"18\"\n  },\n  {\n    imgPath: model3,\n    name: \"Emma\",\n    age: \"24\"\n  }\n];\n\n// nope,likeボタンを押した際にカードの移動アニメーション時間\nconst animationTime = 600;\n\nconst PeopleStyle = styled.div`\n  position: relative;\n  z-index: 1;\n  height: 256px;\n  width: 85%;\n  margin: 0 auto;\n`;\n\nconst UserActionsStyle = styled.div`\n  width: 85%;\n  margin: 40px auto 0;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: center;\n`;\n\nexport default class People extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      people: [\n        {\n          imgPath: model1,\n          name: \"Lara\",\n          age: \"22\"\n        },\n        {\n          imgPath: model2,\n          name: \"Sandra\",\n          age: \"18\"\n        },\n        {\n          imgPath: model3,\n          name: \"Emma\",\n          age: \"24\"\n        }\n      ]\n    };\n    this.firstPeople = React.createRef();\n    this.handleAction = this.handleAction.bind(this);\n  }\n\n  handleAction(e) {\n    const isLikeAction = e.currentTarget.name; // 付与するclassの名前の判別\n\n    // randomなpeopleの選出\n    const randomNum = Math.floor(Math.random() * peopleData.length);\n    const randomPeople = peopleData[randomNum];\n\n    // 表示されていたカードを削除し、ランダムにデータを追加した新しいpeopleデータ\n    const newItem = this.state.people.slice(1).concat(randomPeople);\n\n    const obj = this.firstPeople.current; // 表示されているpeopleのnode\n    obj.classList.add(isLikeAction);\n    setTimeout(() => {\n      obj.classList.remove(isLikeAction);\n      this.setState({\n        isLike: isLikeAction,\n        people: newItem\n      });\n    }, animationTime);\n  }\n\n  render() {\n    const item = this.state.people.map((item, index) => (\n      <Person\n        ref={index === 0 ? this.firstPeople : \"\"}\n        animationTimePerMillisecond={animationTime}\n        key={index}\n        imgPath={item.imgPath}\n        name={item.name}\n        age={item.age}\n      />\n    ));\n    return (\n      <>\n        <PeopleStyle>{item}</PeopleStyle>\n        <UserActionsStyle>\n          <NopeBtn clickFunc={this.handleAction} />\n          <JumpToUserInfo />\n          <LikeBtn clickFunc={this.handleAction} />\n        </UserActionsStyle>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport People from \"./People\";\n\nconst App = () => (\n  <div style={styles.app}>\n    <header style={styles.header}></header>\n    <People />\n  </div>\n);\n\nconst styles = {\n  app: {\n    height: \"100vh\",\n    backgroundColor: \"aliceblue\"\n  },\n  header: {\n    backgroundColor: \"#f6f6f6\",\n    height: \"50px\",\n    margin: \"0 0 1em\"\n  }\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}